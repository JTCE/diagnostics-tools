
" #################### Plugins ######################

execute pathogen#infect()

" ################# General settings ################

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" change language of the menu
set langmenu=en_US
let $LANG='en_US'

" open help in a seperate tab
augroup HelpInTabs
    autocmd!
    autocmd BufEnter  *.txt   call HelpInNewTab()
augroup END

function! HelpInNewTab ()
    if &buftype == 'help'
        "Convert the help window to a tab...
        execute "normal \<C-W>T"
    endif
endfunction

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" set tab title to something meaningful, eg. [4] +test.json
set guitablabel=\[%N\]\ %M%t

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching
set number              " display line numbers on the left
" match other bracket types too
set matchpairs+=<:>

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")
set guioptions+=b
" hide menu
set guioptions-=m
" hide toolbar
set guioptions-=T

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax enable
  set background=light
  " colorscheme solarized
  colorscheme github

  set hlsearch
  " GUI is running or is about to start.
  " Maximize gvim window.
  set lines=40 columns=140
  "set guifont=lucida_console:h10
  set guifont=Consolas:h11:cEASTEUROPE
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")
  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif
  augroup END
else
  set autoindent		" always set autoindenting on
endif " has("autocmd")

" Set Powershell as the default shell
set shell=powershell
set shellcmdflag=-NoProfile\ -Command

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

" autocomplete system paths
"set wildmenu
"set wildmode=list:longest

" unicode support (from http://vim.wikia.com/wiki/Working_with_Unicode)
if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8
  setglobal fileencoding=utf-8
  "setglobal bomb
  set fileencodings=ucs-bom,utf-8,latin2,cp1250
endif

" do not wrap in the middle of the word
set lbr

" make windows clipboard the default register
set clipboard=unnamed

" set tabulator settings
set tabstop=4
set shiftwidth=4
set expandtab

" disable backups
" set nobackup
" set nowritebackup

" set backup dir to temporary folder
set dir=%TMP%
set backupdir=%TMP%

" set case insensitive search
set ignorecase smartcase

" set spelling
" set spell spelllang=en

" search for tags file up the dirs
set tags=./tags;/

" change leader key mapping
let mapleader=","

" trim spaces before saving a file
autocmd BufWritePre * :%s/\s\+$//e
" close nerdtree when closing vim
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" ################# Shortcuts #######################

" better navigation
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
" search for a file in the current folder
nnoremap <leader>o :CtrlP<CR>
" faster save file
nnoremap <leader>w :w<CR>
" toggle spelling
nnoremap <leader>s :set spell!<CR>

" search for the selected text
vmap // y/<C-R>"<CR>

" nerd tree to open a file
set autochdir
let NERDTreeChDirMode=2
map <C-n> :NERDTreeToggle<CR>

" focus on nerd tree
map <leader>t :NERDTreeFocus<CR>

" remove highlight with backspace
nmap <silent>  <BS>  :nohlsearch<CR>

" copy current line with no CR
nmap <leader>y 0y$$``

" insert current date
nnoremap <leader>d "=strftime("%c")<CR>P

" code completion in insert mode
inoremap <C-x><C-]> <C-]>

" ############### Custom file types #################

au BufNewFile,BufRead *.text set filetype=markdown
au BufNewFile,BufRead *.md set filetype=markdown
au BufNewFile,BufRead *.bt set filetype=c
au BufNewFile,BufRead *.1sc set filetype=c
au BufNewFile,BufRead *.ts set filetype=javascript
